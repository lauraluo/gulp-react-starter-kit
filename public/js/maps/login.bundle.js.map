/* publish time Tuesday, March 28th, 2017, 6:52:46 PM */{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/fbjs/lib/invariant.js","node_modules/object-assign/index.js","node_modules/react-addons-update/index.js","node_modules/react/lib/reactProdInvariant.js","node_modules/react/lib/update.js","src/components/login/RootComponent.jsx","src/login.js"],"names":[],"mappings":"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","file":"../../mockExamples/login.bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar validateFormat = function validateFormat(format) {};\n\nif (\"development\" !== 'production') {\n  validateFormat = function validateFormat(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nmodule.exports = invariant;","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","module.exports = require('react/lib/update');","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * \n */\n'use strict';\n\n/**\n * WARNING: DO NOT manually require this module.\n * This is a replacement for `invariant(...)` used by the error code system\n * and will _only_ be required by the corresponding babel pass.\n * It always throws.\n */\n\nfunction reactProdInvariant(code) {\n  var argCount = arguments.length - 1;\n\n  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;\n\n  for (var argIdx = 0; argIdx < argCount; argIdx++) {\n    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);\n  }\n\n  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';\n\n  var error = new Error(message);\n  error.name = 'Invariant Violation';\n  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame\n\n  throw error;\n}\n\nmodule.exports = reactProdInvariant;","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n/* global hasOwnProperty:true */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant'),\n    _assign = require('object-assign');\n\nvar invariant = require('fbjs/lib/invariant');\nvar hasOwnProperty = {}.hasOwnProperty;\n\nfunction shallowCopy(x) {\n  if (Array.isArray(x)) {\n    return x.concat();\n  } else if (x && typeof x === 'object') {\n    return _assign(new x.constructor(), x);\n  } else {\n    return x;\n  }\n}\n\nvar COMMAND_PUSH = '$push';\nvar COMMAND_UNSHIFT = '$unshift';\nvar COMMAND_SPLICE = '$splice';\nvar COMMAND_SET = '$set';\nvar COMMAND_MERGE = '$merge';\nvar COMMAND_APPLY = '$apply';\n\nvar ALL_COMMANDS_LIST = [COMMAND_PUSH, COMMAND_UNSHIFT, COMMAND_SPLICE, COMMAND_SET, COMMAND_MERGE, COMMAND_APPLY];\n\nvar ALL_COMMANDS_SET = {};\n\nALL_COMMANDS_LIST.forEach(function (command) {\n  ALL_COMMANDS_SET[command] = true;\n});\n\nfunction invariantArrayCase(value, spec, command) {\n  !Array.isArray(value) ? \"development\" !== 'production' ? invariant(false, 'update(): expected target of %s to be an array; got %s.', command, value) : _prodInvariant('1', command, value) : void 0;\n  var specValue = spec[command];\n  !Array.isArray(specValue) ? \"development\" !== 'production' ? invariant(false, 'update(): expected spec of %s to be an array; got %s. Did you forget to wrap your parameter in an array?', command, specValue) : _prodInvariant('2', command, specValue) : void 0;\n}\n\n/**\n * Returns a updated shallow copy of an object without mutating the original.\n * See https://facebook.github.io/react/docs/update.html for details.\n */\nfunction update(value, spec) {\n  !(typeof spec === 'object') ? \"development\" !== 'production' ? invariant(false, 'update(): You provided a key path to update() that did not contain one of %s. Did you forget to include {%s: ...}?', ALL_COMMANDS_LIST.join(', '), COMMAND_SET) : _prodInvariant('3', ALL_COMMANDS_LIST.join(', '), COMMAND_SET) : void 0;\n\n  if (hasOwnProperty.call(spec, COMMAND_SET)) {\n    !(Object.keys(spec).length === 1) ? \"development\" !== 'production' ? invariant(false, 'Cannot have more than one key in an object with %s', COMMAND_SET) : _prodInvariant('4', COMMAND_SET) : void 0;\n\n    return spec[COMMAND_SET];\n  }\n\n  var nextValue = shallowCopy(value);\n\n  if (hasOwnProperty.call(spec, COMMAND_MERGE)) {\n    var mergeObj = spec[COMMAND_MERGE];\n    !(mergeObj && typeof mergeObj === 'object') ? \"development\" !== 'production' ? invariant(false, 'update(): %s expects a spec of type \\'object\\'; got %s', COMMAND_MERGE, mergeObj) : _prodInvariant('5', COMMAND_MERGE, mergeObj) : void 0;\n    !(nextValue && typeof nextValue === 'object') ? \"development\" !== 'production' ? invariant(false, 'update(): %s expects a target of type \\'object\\'; got %s', COMMAND_MERGE, nextValue) : _prodInvariant('6', COMMAND_MERGE, nextValue) : void 0;\n    _assign(nextValue, spec[COMMAND_MERGE]);\n  }\n\n  if (hasOwnProperty.call(spec, COMMAND_PUSH)) {\n    invariantArrayCase(value, spec, COMMAND_PUSH);\n    spec[COMMAND_PUSH].forEach(function (item) {\n      nextValue.push(item);\n    });\n  }\n\n  if (hasOwnProperty.call(spec, COMMAND_UNSHIFT)) {\n    invariantArrayCase(value, spec, COMMAND_UNSHIFT);\n    spec[COMMAND_UNSHIFT].forEach(function (item) {\n      nextValue.unshift(item);\n    });\n  }\n\n  if (hasOwnProperty.call(spec, COMMAND_SPLICE)) {\n    !Array.isArray(value) ? \"development\" !== 'production' ? invariant(false, 'Expected %s target to be an array; got %s', COMMAND_SPLICE, value) : _prodInvariant('7', COMMAND_SPLICE, value) : void 0;\n    !Array.isArray(spec[COMMAND_SPLICE]) ? \"development\" !== 'production' ? invariant(false, 'update(): expected spec of %s to be an array of arrays; got %s. Did you forget to wrap your parameters in an array?', COMMAND_SPLICE, spec[COMMAND_SPLICE]) : _prodInvariant('8', COMMAND_SPLICE, spec[COMMAND_SPLICE]) : void 0;\n    spec[COMMAND_SPLICE].forEach(function (args) {\n      !Array.isArray(args) ? \"development\" !== 'production' ? invariant(false, 'update(): expected spec of %s to be an array of arrays; got %s. Did you forget to wrap your parameters in an array?', COMMAND_SPLICE, spec[COMMAND_SPLICE]) : _prodInvariant('8', COMMAND_SPLICE, spec[COMMAND_SPLICE]) : void 0;\n      nextValue.splice.apply(nextValue, args);\n    });\n  }\n\n  if (hasOwnProperty.call(spec, COMMAND_APPLY)) {\n    !(typeof spec[COMMAND_APPLY] === 'function') ? \"development\" !== 'production' ? invariant(false, 'update(): expected spec of %s to be a function; got %s.', COMMAND_APPLY, spec[COMMAND_APPLY]) : _prodInvariant('9', COMMAND_APPLY, spec[COMMAND_APPLY]) : void 0;\n    nextValue = spec[COMMAND_APPLY](nextValue);\n  }\n\n  for (var k in spec) {\n    if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {\n      nextValue[k] = update(value[k], spec[k]);\n    }\n  }\n\n  return nextValue;\n}\n\nmodule.exports = update;","import update from 'react-addons-update'\nimport React from 'react'\nimport _ from 'lodash'\n\n\nvar MyComponent = React.createClass({\n\tpropTypes: {\n\t\t// initData: React.PropTypes.array\n\t},\n\tgetInitialState: function () {\n\t\treturn {\n\t\t\tvalidation: {\n\t\t\t\tresult: true,\n\t\t\t\terrorMsg: null,\n\t\t\t\tchilds: [\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"account\",\n\t\t\t\t\t\trules: ['/^([\\w-_]+(?:\\.[\\w-_]+)*)@((?:[a-z0-9]+(?:-[a-zA-Z0-9]+)*)+\\.[a-z]{2,6})$/i'],\n\t\t\t\t\t\tresult: true,\n\t\t\t\t\t\terrorMsg: null\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"password\",\n\t\t\t\t\t\trules: ['\\S{6,}'],\n\t\t\t\t\t\tresult: true,\n\t\t\t\t\t\terrorMsg: null\n\t\t\t\t\t}\n\t\t\t\t]\n\n\t\t\t},\n\t\t\tform: {\n\t\t\t\taccount: \"\",\n\t\t\t\tpassword: \"\"\n\t\t\t}\n\t\t}\n\t},\n\t_validation: function(){\n\t\t// var _this = this;\n\t\t// var mapResult = false;\n\t\t// var validationChild = _this.state.validation.child;\n\t\t// var fomrData = _this.form;\n\n\t\t// var testRule = function(rules,item){\n\t\t// \tvar results = rules.map(function(ruleString,index){\n\t\t// \t\tvar re = new RegExp(ruleString);\n\t\t// \t\treturn re.test(item);\n\t\t// \t});\n\n\t\t// \treturn results.indexOf(false) == -1;\n\t\t// };\n\n\t\t// validationChild.forEach((item,key) => {\n\t\t// \tvar result = testRule(item.rule,formData[key]);\n\t\t\t\n\n\t\t// });\n\t},\n\t_handleChange: function(e) {\n\t\tvar nodes = e.target.dataset.rel.split('.');\n\t\tvar phaserJsonString = \"{<%= sub %>}\";\n\t\tvar phaserObject = {};\n\t\tvar _this = this;\n\t\tvar subPhaserString;\n\t\tnodes.forEach(function(item,index){\n\t\t\tvar compiled = _.template(phaserJsonString);\n\t\t\tif(index == nodes.length -1 ){\n\t\t\t\tsubPhaserString = '\"'+item+'\"'+':'+ '\"'+e.target.value+'\"';\n\t\t\t\tphaserJsonString = compiled({ 'sub': subPhaserString });\n\t\t\t} else {\n\t\t\t\tsubPhaserString = '\"'+item+'\"'+':{<%= sub %>}';\n\t\t\t\tphaserJsonString = compiled({ 'sub': subPhaserString });\n\t\t\t}\n\t\t});\n\n\t\tphaserObject = JSON.parse(phaserJsonString);\n\t\t\n\t\tthis.setState({\n\t\t\tform: update(_this.state.form, {\n\t\t\t\t$merge: phaserObject.form\n\t\t\t})\n\t\t});\n\t},\n\t_submit: function () {\n\n\t},\n\trender: function () {\n\t\tvar _this = this;\n\n\t\treturn (\n\t\t\t<form>\n\t\t\t\t<div className=\"form-group  has-error\">\n\t\t\t\t\t<label htmlFor=\"exampleInputEmail1\">Account</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\tname=\"account\"\n\t\t\t\t\t\tdata-rel=\"form.account\"\n\t\t\t\t\t\tvalue={ this.state.form.account }\n\t\t\t\t\t\tonChange={this._handleChange} \n\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\tid=\"exampleInputEmail1\"\n\t\t\t\t\t\tplaceholder=\"Email\" />\n\t\t\t\t\t<div className=\"help-block\">\n\t\t\t\t\t\t請輸入正確的帳號格式：name@abc.com\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t<label htmlFor=\"exampleInputPassword1\">Password</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\tdata-rel=\"form.password\"\n\t\t\t\t\t\tvalue={ this.state.form.password }\n\t\t\t\t\t\tonChange={this._handleChange} \n\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\tid=\"exampleInputPassword1\"\n\t\t\t\t\t\tplaceholder=\"Password\" />\n\t\t\t\t\t<div className=\"help-block\">\n\t\t\t\t\t\t請輸入正確的密碼格式：長度至少大於六\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<button type=\"submit\" className=\"btn btn-default\">Submit</button>\n\t\t\t</form>\n\t\t)\n\t}\n});\n\n\nexport default MyComponent;","import Login from './components/login/RootComponent';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(\n\t<Login/>,\n\tdocument.getElementById('login')\n)"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}