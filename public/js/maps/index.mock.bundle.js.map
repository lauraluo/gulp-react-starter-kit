{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/components/index/MockComponent.jsx","src/components/index/RootComponent.jsx","src/index.mock.js"],"names":[],"mappings":"AAAA;;;;;;;ACCC;;;;AACA;;;;;;AAED,IAAI,gBAAgB,gBAAM,WAAN,CAAkB;AAAA;;AACrC,kBAAiB,2BAAU;AACvB,SAAO;AACN,aAAU;AADJ,GAAP;AAGA,EALiC;AAMlC,qBAAoB,8BAAU;AAC7B,MAAI,QAAQ,IAAZ;AACH,mBAAK,KAAL,CAAW;AACP,YAAS;AADF,GAAX;;AAIA,mBAAK,IAAL,CAAU,QAAV,EAAoB;AAChB,gBAAa,CAAC;AACV,aAAS,CADC;AAEV,aAAS;AAFC,IAAD;AADG,GAApB;;AAOA,IAAE,IAAF,CAAO;AACH,QAAK,YADF;AAEH,aAAU;AAFP,GAAP,EAGG,IAHH,CAGQ,UAAS,IAAT,EAAe,MAAf,EAAuB,KAAvB,EAA6B;AACjC,SAAM,QAAN,CAAe,EAAC,UAAU,IAAX,EAAf;AACH,GALD;AAMG,EAzBiC;AA0BrC,SAAQ,kBAAU;AACjB;AACA,MAAI,QAAQ,IAAZ;AACA,MAAI,oBAAqB,gBAAM,QAAN,CAAe,GAAf,CAAmB,KAAK,KAAL,CAAW,QAA9B,EAAwC,UAAS,KAAT,EAAe;AAC/E,UAAO,gBAAM,YAAN,CAAmB,KAAnB,EAA0B;AAChC,cAAU,MAAM,KAAN,CAAY;;AADU,IAA1B,CAAP;AAIA,GALwB,CAAzB;;AAQA,SAAO;AAAA;AAAA;AAAO;AAAP,GAAP;AACA;AAtCoC,CAAlB,CAApB;;kBAyCe,a;;;;;;;;;AC7Cd;;;;;;AAED,IAAI,cAAc,gBAAM,WAAN,CAAkB;AAAA;;AACnC,YAAW;AACV,YAAU,gBAAM,SAAN,CAAgB;AADhB,EADwB;AAInC,SAAQ,kBAAU;AACjB,MAAI,QAAQ,IAAZ;AACA,MAAI,YAAY,EAAhB;;AAEA,MAAG,MAAM,KAAN,CAAY,QAAZ,IAAwB,MAAM,KAAN,CAAY,QAAZ,CAAqB,IAAhD,EAAsD;AACrD,eAAY,MAAM,KAAN,CAAY,QAAZ,CAAqB,IAArB,CAA0B,GAA1B,CAA8B,UAAS,IAAT,EAAc,CAAd,EAAgB;AACxD,WAAQ;AAAA;AAAA,OAAI,KAAK,CAAT;AACP;AAAA;AAAA;AAAO,WAAK;AAAZ,MADO;AAEP;AAAA;AAAA;AAAO,WAAK;AAAZ;AAFO,KAAR;AAID,IALW,CAAZ;AAMA;;AAED,SAAO;AAAA;AAAA;AAAK,YAAL;AAAA;AAAA,GAAP;AACA;AAlBkC,CAAlB,CAAlB;;kBAsBe,W;;;;;ACxBf;;;;AACA;;;;AAEA;;;;;;AAEA,mBAAS,MAAT,CACC;AAAA;AAAA;AACC;AADD,CADD,EAIC,SAAS,cAAT,CAAwB,OAAxB,CAJD","file":"../../mockExamples/index.mock.bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\n import React from 'react'\n import Mock from 'mockjs'\n\nvar MockComponent = React.createClass({\n\tgetInitialState: function(){\n    \treturn {\n    \t\tinitData: {}\n    \t};\n    },\n    componentWillMount: function(){\n    \tvar _this = this;\n\t\tMock.setup({\n\t\t    timeout: '200-600'\n\t\t});\n\n\t\tMock.mock(/\\.json/, {\n\t\t    'list|1-10': [{\n\t\t        'id|+1': 1,\n\t\t        'email': '@EMAIL'\n\t\t    }]\n\t\t});\n\n\t\t$.ajax({\n\t\t    url: 'hello.json',\n\t\t    dataType: 'json'\n\t\t}).done(function(data, status, jqXHR){\n\t\t    _this.setState({initData: data});\n\t\t});\n    },\n\trender: function(){\n\t\t//more than one child\n\t\tvar _this = this;\n\t\tvar childrenWithProps =  React.Children.map(this.props.children, function(child){\n\t\t\treturn React.cloneElement(child, {\n\t\t\t\tinitData: _this.state.initData\n\t\t\t\t\n\t\t\t});\n\t\t});\n\n\t\t\n\t\treturn <div>{ childrenWithProps }</div>\n\t}\n});\n\nexport default MockComponent;\n\n\n\n\n"," import React from 'react'\n\nvar MyComponent = React.createClass({\n\tpropTypes: {\n\t\tinitData: React.PropTypes.array\n\t},\n\trender: function(){\n\t\tvar _this = this;\n\t\tvar listItems = []\n\n\t\tif(_this.props.initData && _this.props.initData.list) {\n\t\t\tlistItems = _this.props.initData.list.map(function(item,i){\n\t\t\t  return (<li key={i}>\n\t\t\t  \t<span>{item.id}</span>\n\t\t\t  \t<span>{item.email}</span>\n\t\t\t  </li>)\t\n\t\t\t});\n\t\t}\n\t\t\n\t\treturn <ul>{listItems} lalalkkkkkkkuo1</ul>\n\t}\n});\n\n\nexport default MyComponent;","import Index from './components/index/RootComponent';\nimport ReactDOM from 'react-dom';\nimport React from 'react-dom';\nimport MockComponent from './components/index/MockComponent'\n\nReactDOM.render(\n\t<MockComponent>\n\t\t<Index/>\n\t</MockComponent>,\n\tdocument.getElementById('login')\n)"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvY29tcG9uZW50cy9pbmRleC9Nb2NrQ29tcG9uZW50LmpzeCIsInNyYy9jb21wb25lbnRzL2luZGV4L1Jvb3RDb21wb25lbnQuanN4Iiwic3JjL2luZGV4Lm1vY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUNDQzs7OztBQUNBOzs7Ozs7QUFFRCxJQUFJLGdCQUFnQixnQkFBTSxXQUFOLENBQWtCO0FBQUE7O0FBQ3JDLGtCQUFpQiwyQkFBVTtBQUN2QixTQUFPO0FBQ04sYUFBVTtBQURKLEdBQVA7QUFHQSxFQUxpQztBQU1sQyxxQkFBb0IsOEJBQVU7QUFDN0IsTUFBSSxRQUFRLElBQVo7QUFDSCxtQkFBSyxLQUFMLENBQVc7QUFDUCxZQUFTO0FBREYsR0FBWDs7QUFJQSxtQkFBSyxJQUFMLENBQVUsUUFBVixFQUFvQjtBQUNoQixnQkFBYSxDQUFDO0FBQ1YsYUFBUyxDQURDO0FBRVYsYUFBUztBQUZDLElBQUQ7QUFERyxHQUFwQjs7QUFPQSxJQUFFLElBQUYsQ0FBTztBQUNILFFBQUssWUFERjtBQUVILGFBQVU7QUFGUCxHQUFQLEVBR0csSUFISCxDQUdRLFVBQVMsSUFBVCxFQUFlLE1BQWYsRUFBdUIsS0FBdkIsRUFBNkI7QUFDakMsU0FBTSxRQUFOLENBQWUsRUFBQyxVQUFVLElBQVgsRUFBZjtBQUNILEdBTEQ7QUFNRyxFQXpCaUM7QUEwQnJDLFNBQVEsa0JBQVU7QUFDakI7QUFDQSxNQUFJLFFBQVEsSUFBWjtBQUNBLE1BQUksb0JBQXFCLGdCQUFNLFFBQU4sQ0FBZSxHQUFmLENBQW1CLEtBQUssS0FBTCxDQUFXLFFBQTlCLEVBQXdDLFVBQVMsS0FBVCxFQUFlO0FBQy9FLFVBQU8sZ0JBQU0sWUFBTixDQUFtQixLQUFuQixFQUEwQjtBQUNoQyxjQUFVLE1BQU0sS0FBTixDQUFZOztBQURVLElBQTFCLENBQVA7QUFJQSxHQUx3QixDQUF6Qjs7QUFRQSxTQUFPO0FBQUE7QUFBQTtBQUFPO0FBQVAsR0FBUDtBQUNBO0FBdENvQyxDQUFsQixDQUFwQjs7a0JBeUNlLGE7Ozs7Ozs7OztBQzdDZDs7Ozs7O0FBRUQsSUFBSSxjQUFjLGdCQUFNLFdBQU4sQ0FBa0I7QUFBQTs7QUFDbkMsWUFBVztBQUNWLFlBQVUsZ0JBQU0sU0FBTixDQUFnQjtBQURoQixFQUR3QjtBQUluQyxTQUFRLGtCQUFVO0FBQ2pCLE1BQUksUUFBUSxJQUFaO0FBQ0EsTUFBSSxZQUFZLEVBQWhCOztBQUVBLE1BQUcsTUFBTSxLQUFOLENBQVksUUFBWixJQUF3QixNQUFNLEtBQU4sQ0FBWSxRQUFaLENBQXFCLElBQWhELEVBQXNEO0FBQ3JELGVBQVksTUFBTSxLQUFOLENBQVksUUFBWixDQUFxQixJQUFyQixDQUEwQixHQUExQixDQUE4QixVQUFTLElBQVQsRUFBYyxDQUFkLEVBQWdCO0FBQ3hELFdBQVE7QUFBQTtBQUFBLE9BQUksS0FBSyxDQUFUO0FBQ1A7QUFBQTtBQUFBO0FBQU8sV0FBSztBQUFaLE1BRE87QUFFUDtBQUFBO0FBQUE7QUFBTyxXQUFLO0FBQVo7QUFGTyxLQUFSO0FBSUQsSUFMVyxDQUFaO0FBTUE7O0FBRUQsU0FBTztBQUFBO0FBQUE7QUFBSyxZQUFMO0FBQUE7QUFBQSxHQUFQO0FBQ0E7QUFsQmtDLENBQWxCLENBQWxCOztrQkFzQmUsVzs7Ozs7QUN4QmY7Ozs7QUFDQTs7OztBQUVBOzs7Ozs7QUFFQSxtQkFBUyxNQUFULENBQ0M7QUFBQTtBQUFBO0FBQ0M7QUFERCxDQURELEVBSUMsU0FBUyxjQUFULENBQXdCLE9BQXhCLENBSkQiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiXG4gaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuIGltcG9ydCBNb2NrIGZyb20gJ21vY2tqcydcblxudmFyIE1vY2tDb21wb25lbnQgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cdGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24oKXtcbiAgICBcdHJldHVybiB7XG4gICAgXHRcdGluaXREYXRhOiB7fVxuICAgIFx0fTtcbiAgICB9LFxuICAgIGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24oKXtcbiAgICBcdHZhciBfdGhpcyA9IHRoaXM7XG5cdFx0TW9jay5zZXR1cCh7XG5cdFx0ICAgIHRpbWVvdXQ6ICcyMDAtNjAwJ1xuXHRcdH0pO1xuXG5cdFx0TW9jay5tb2NrKC9cXC5qc29uLywge1xuXHRcdCAgICAnbGlzdHwxLTEwJzogW3tcblx0XHQgICAgICAgICdpZHwrMSc6IDEsXG5cdFx0ICAgICAgICAnZW1haWwnOiAnQEVNQUlMJ1xuXHRcdCAgICB9XVxuXHRcdH0pO1xuXG5cdFx0JC5hamF4KHtcblx0XHQgICAgdXJsOiAnaGVsbG8uanNvbicsXG5cdFx0ICAgIGRhdGFUeXBlOiAnanNvbidcblx0XHR9KS5kb25lKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cywganFYSFIpe1xuXHRcdCAgICBfdGhpcy5zZXRTdGF0ZSh7aW5pdERhdGE6IGRhdGF9KTtcblx0XHR9KTtcbiAgICB9LFxuXHRyZW5kZXI6IGZ1bmN0aW9uKCl7XG5cdFx0Ly9tb3JlIHRoYW4gb25lIGNoaWxkXG5cdFx0dmFyIF90aGlzID0gdGhpcztcblx0XHR2YXIgY2hpbGRyZW5XaXRoUHJvcHMgPSAgUmVhY3QuQ2hpbGRyZW4ubWFwKHRoaXMucHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uKGNoaWxkKXtcblx0XHRcdHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcblx0XHRcdFx0aW5pdERhdGE6IF90aGlzLnN0YXRlLmluaXREYXRhXG5cdFx0XHRcdFxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cblx0XHRcblx0XHRyZXR1cm4gPGRpdj57IGNoaWxkcmVuV2l0aFByb3BzIH08L2Rpdj5cblx0fVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IE1vY2tDb21wb25lbnQ7XG5cblxuXG5cbiIsIiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5cbnZhciBNeUNvbXBvbmVudCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblx0cHJvcFR5cGVzOiB7XG5cdFx0aW5pdERhdGE6IFJlYWN0LlByb3BUeXBlcy5hcnJheVxuXHR9LFxuXHRyZW5kZXI6IGZ1bmN0aW9uKCl7XG5cdFx0dmFyIF90aGlzID0gdGhpcztcblx0XHR2YXIgbGlzdEl0ZW1zID0gW11cblxuXHRcdGlmKF90aGlzLnByb3BzLmluaXREYXRhICYmIF90aGlzLnByb3BzLmluaXREYXRhLmxpc3QpIHtcblx0XHRcdGxpc3RJdGVtcyA9IF90aGlzLnByb3BzLmluaXREYXRhLmxpc3QubWFwKGZ1bmN0aW9uKGl0ZW0saSl7XG5cdFx0XHQgIHJldHVybiAoPGxpIGtleT17aX0+XG5cdFx0XHQgIFx0PHNwYW4+e2l0ZW0uaWR9PC9zcGFuPlxuXHRcdFx0ICBcdDxzcGFuPntpdGVtLmVtYWlsfTwvc3Bhbj5cblx0XHRcdCAgPC9saT4pXHRcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gPHVsPntsaXN0SXRlbXN9IGxhbGFsa2tra2tra3VvMTwvdWw+XG5cdH1cbn0pO1xuXG5cbmV4cG9ydCBkZWZhdWx0IE15Q29tcG9uZW50OyIsImltcG9ydCBJbmRleCBmcm9tICcuL2NvbXBvbmVudHMvaW5kZXgvUm9vdENvbXBvbmVudCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IE1vY2tDb21wb25lbnQgZnJvbSAnLi9jb21wb25lbnRzL2luZGV4L01vY2tDb21wb25lbnQnXG5cblJlYWN0RE9NLnJlbmRlcihcblx0PE1vY2tDb21wb25lbnQ+XG5cdFx0PEluZGV4Lz5cblx0PC9Nb2NrQ29tcG9uZW50Pixcblx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xvZ2luJylcbikiXX0="}